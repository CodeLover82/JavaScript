사용방법

1. inline 방식
ex) <input type="button" onclick="alert('a');">

2. script 태그 이용
<script> 
  alert("a");
</script>

3. 외부 파일로 분리
<script src="./asd.js"></script>

4. 스크립트 태그의 위치
body 태그 맨 아래.
<body>
  ...
  ..
  <script>
  </script>
</body>

< object model >


window 객체 -> DOM  : document는 윈도우 객체의 프로퍼티. => window.document 지만 window 는 생략 가능.
              BOM : navigator, screen, frames..
              JS : Object, Array, Function
              
var imgs = document.getElementsByTagname('img');
imgs[0] => 배열의 1번째 요소.
imgs[0].style.width='30px'; // style : css 속성.

window.alert("hello"); => window는 생략가능.

전역 변수, 전역함수를 만드는 것은 window의 프로퍼티를 추가한 것이다.
즉, 콘솔창에 a = 1;
치면, 이것은 window.a 와 같다.

alert(1); // 경고창을 확인 버튼 누르기 전까지는 다음 로직이 수행되지 않는다.
alert(2);
if(confirm('ok?'))alert('ok'); // confirm 은 확인 or 취소 버튼이 나온다. boolean 리턴.
else alert('cancel');
if(prompt('id?') ==='egoing')alert('welcome'); // 입력창 생성. 입력값 반환.
else alert('fail');

현재의 주소값 출력: console.log(location.href);  
 - 주소 변경 : location.href = "asdads";
프로토콜 출력 :console.log(location.protocol);
서버의 주소 : location.host; // 뒤에 Get 방식으로 딸려오는 값들은 제외
포트 주소 : location.port;
리로드 : location.reload();

window.open('sad.html') // 새 창에서 문서 출력
window.open('sad.html','_blank') // 새 창에서 문서 출력
window.open('sad.html','_self') // 현재 창에서 문서 출력
window.open('sad.html','_blank', 'width=100, height=200'); // 세번째 인자는 새 창의 모양과 관련된 속성.

< document.getElementsByTagName >
var lis = document.getElementsByTagName('li');
for(var i = 0;i < lis.length;i++){
  lis[i].style.color='red';
}

// 특정한 ul에 있는 li만 적용할 때
var ul = document.getElementsByTagName('ul')[0];
var lis = ul.getElementsByTagName('li');
for(var i = 0;list.length;i++){
  lis[i].style.color='red';
}

< getElementsByClassName >
var lis = document.getElementsByClassName('active');
    for(var i=0; i < lis.length; i++){
        lis[i].style.color='red';  

< getElementsById >
var li = document.getElementById('active');
li.style.color='red';

< querySelector >
var li = document.querySelector('li'); // TagName , 제일 먼저 나타나는 하나만
li.style.color='red';
var li = document.querySelector('.active'); // ClassName, 제일 먼저 나타나는 하나만
li.style.color='blue';

여러개 선택하기
var lis = document.querySelectorAll('li'); // or '.active'
for(var i = 0;i < list.length;i++)lis[i].style.color='blue';



document.getElementById('active').tagName // 태그의 이름
document.getElementById('active').id // id 값
document.getElementById('active').className // class 
document.getElementById('target').getAttribute('href') // 속성값 가져오기
document.getElementById('target').setAttribute('title', 'opentutorials.org') // 속성값 설정하기
document.getElementById('target').title = 'opentutorials.org'  => 이렇게도 가능하다.

***************그러나 setAttribute를 사용하자.!! 그래야 css사용할 때의 속성값과 같ㄷ다!!***************
=> jquery에서는 이것에 대응도ㅓㅣ는것이 attr 이다.
ex) $('#target').attr('href'); // 조회  = getAttribute
ex) $('#target').attr('href', "http://a"); // 설정 = setAttribute

< 이벤트 >
이벤트 타겟 : 이벤트의 대상이 되는 것.
이벤트 타입 : onclick, onchange.. etc
이벤트 핸들러 : 이벤트가 발생했을 때 실행될 코드
this : 이벤트 타겟을 가리킬 때 사용

inline : <input type="button" onclick="alert('Hello world, '+ this.value);" value="button" />
프로퍼티 리스너 : 
ex)
var t = document.getElementById('target');
    t.onclick = function(){
        alert('Hello world');
    }

이벤트 리스너 :
ex)

   var t = document.getElementById('target');
    t.addEventListener('click', function(event){
        alert('Hello world, '+event.target.value);
    });
    
    
    
이벤트 객체 : 이벤트 객체는 이벤트가 실행될 때 이벤트 핸들러의 인자로 전달된다.  
ex)
var t = document.getElementById('target');
    t.onclick = function(event){
        alert('Hello world, '+event.target.value)   // event.target = 타겟 엘리먼트
    }
    
< 기본 동작의 취소 >
return 값이 false이면 기본동작이 수행되지 않는다.
ex)
<a href="http://opentutorials.org" onclick="if(document.getElementById('prevent').checked) return false;">opentutorials</a>
ex)
  document.querySelector('a').onclick = function(event){
        if(document.getElementById('prevent').checked)
            return false;
    };
ex)
    document.querySelector('form').addEventListener('submit', function(event){
                if(document.getElementById('prevent').checked)
                    event.preventDefault();
            });

이벤트 타입
[폼]
1. submit : 폼을 제출할 때
var t = document.getElementById('target');
t.addEventListener('submit', function(event){
    if(document.getElementById('name').value.length === 0){
        alert('Name 필드의 값이 누락 되었습니다');
        event.preventDefault();
    }
});
2. change : input, textarea 등 입력을 다 끝내고 포커즈를 빠져 나왔을 때
var t = document.getElementById('target');
t.addEventListener('change', function(event){
    document.getElementById('result').innerHTML=event.target.value;
});
3. blur, focus : focus는 엘리먼트에 포커스가 생겼을 때, blur은 포커스가 사라졌을 때
var t = document.getElementById('target');
t.addEventListener('blur', function(event){
    alert('blur');  
});
t.addEventListener('focus', function(event){
    alert('focus'); 
});

[문서 로딩]
 window.addEventListener('load', function(){
            var t = document.getElementById('target');
            console.log(t);
        })
